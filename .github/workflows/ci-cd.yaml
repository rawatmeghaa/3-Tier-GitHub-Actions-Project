name: Nodejs todo

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout_code
        uses: actions/checkout@v4
      - name: Install nodejs
        uses: actions/setup-node@v4
        with: 
          node-version: '24'
      - name: Frontend Compilation
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +
      - name: Backend Compilation
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +
        
  gitleak_scans:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Gitleaks setup
        uses: gitleaks/gitleaks-action@v2
      - name: Gitleaks scan
        run: |
          gitleaks detect --source ./client --exit-code 1
          gitleaks detect --source ./api --exit-code 1

  trivy_fs_scan:
    runs-on: ubuntu-latest
    needs: gitleak_scans
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: trivy setup 
        uses: aquasecurity/trivy-action@0.28.0 
        with: 
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "HIGH,CRITICAL"

  # sonar_frontend:
  #   runs-on: sonar
  #   needs: trivy_fs_scan
  #   steps:
  #     - name: checkout code
  #       uses: actions/checkout@v4
  #     - name: Sonarqube setup 
  #       uses: sonarsource/sonarqube-scan-action@master
  #       with: 
  #         projectBaseDir: client
  #         args: >
  #           -Dsonar.projectKey=myproject
  #           -Dsonar.projectName=myproject
  #           -Dsonar.sources=.
  #           -Dsonar.exclusions=**/nodemodules/**,**/dist/**,**/build/**
  #       env:
  #         SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
  #         SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}

  # sonar_backend:
    # runs-on: sonar
    # needs: sonar_frontend
    # steps:
    #   - name: checkout code
    #     uses: actions/checkout@v4
    #   - name: Sonarqube setup 
    #     uses: sonarsource/sonarqube-scan-action@master
    #     with: 
    #       projectBaseDir: api
    #       args: >
    #         -Dsonar.projectKey=myproject
    #         -Dsonar.projectName=myproject
    #         -Dsonar.sources=.
    #         -Dsonar.exclusions=**/nodemodules/**,**/dist/**,**/build/**
    #     env:
    #       SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
    #       SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}

  build_frontend_dcoker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar_backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: megha609/threetierclient:latest
          file: ./client/Dockerfile 

  build_backend_dcoker_image_and_push:
    runs-on: ubuntu-latest
    needs: build_frontend_dcoker_image_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: megha609/threetierapi:latest
          file: ./api/Dockerfile 